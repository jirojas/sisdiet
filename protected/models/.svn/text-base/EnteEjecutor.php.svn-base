<?php

/**
 * This is the model class for table "maquinaria.ente_ejecutor".
 *
 * The followings are the available columns in table 'maquinaria.ente_ejecutor':
 * @property integer $id
 * @property string $descripcion
 * @property boolean $blnborrado
 */
class EnteEjecutor extends CActiveRecord
{
	/**
	 * Returns the static model of the specified AR class.
	 * @param string $className active record class name.
	 * @return EnteEjecutor the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'maquinaria.ente_ejecutor';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('descripcion', 'required'),
			array('id', 'numerical', 'integerOnly'=>true),
			array('descripcion', 'length', 'max'=>250),
			array('blnborrado, id_estado, id_perfil_direccion', 'safe'),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('id, descripcion, blnborrado, id_perfil_direccion, id_estado', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'Id',
			'descripcion' => 'Descripcion',
			'blnborrado' => 'Blnborrado',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
            $id=Yii::app()->user->id; 
            $sql='select * from maquinaria.usuario where id='.$id.';'; 
                $connection=Yii::app()->db;
                $command=$connection->createCommand($sql); 
                $row=$command->queryRow(); 
                $id_perfil=$row["id_perfil_direccion"];
                $perfil=$row["id_perfil"];
                $estado=$row["id_estado"];
		// @todo Please modify the following code to remove attributes that should not be searched.

                     $criteria=new CDbCriteria;
                $sort=new CSort();
             if($perfil=='1' || $perfil=='5')
                {
                
                $criteria->condition = "id!=0";

		$criteria->compare('id',$this->id);
		$criteria->compare('descripcion',$this->descripcion,true);
		$criteria->compare('blnborrado',$this->blnborrado);
                }
                else
                {
                   
           //     $criteria->condition = "id!=0 and id_perfil_direccion=$id_perfil and id_estado=$estado";

		$criteria->compare('id',$this->id);
		$criteria->compare('descripcion',$this->descripcion,true);
		$criteria->compare('blnborrado',$this->blnborrado);
                }
		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
        
        
                 public function behaviors()
{
    return array(
        'CTimestampBehavior' => array(
            'class' => 'zii.behaviors.CTimestampBehavior',
            'createAttribute' => 'created_date',
            'updateAttribute' => 'modified_date',
            'setUpdateOnCreate' => true,
        ),
        'BlameableBehavior' => array(
            'class' => 'application.components.behaviors.BlameableBehavior',
            'createdByColumn' => 'created_by', 
            'updatedByColumn' => 'modified_by',  
        ),
    );  
}
        
}