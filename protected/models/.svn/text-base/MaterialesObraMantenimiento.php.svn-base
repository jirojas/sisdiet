<?php

/**
 * This is the model class for table "mantenimiento1.materiales_obra_mantenimiento".
 *
 * The followings are the available columns in table 'mantenimiento1.materiales_obra_mantenimiento':
 * @property integer $id
 * @property integer $id_obra_pk_mantenimiento
 * @property string $descripcion
 * @property integer $id_material_mantenimiento
 * @property double $cantidad_global
 * @property double $cantidad_colocada
 * @property boolean $blnborrado
 * @property integer $created_by
 * @property integer $modified_by
 * @property string $created_date
 * @property string $modified_date
 * @property integer $id_estado_obra_mantenimiento
 */
class MaterialesObraMantenimiento extends CActiveRecord
{
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'mantenimiento1.materiales_obra_mantenimiento';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
                        array( 'id_material_mantenimiento, cantidad_global', 'required'),
			array('id_obra_pk_mantenimiento, id_material_mantenimiento, created_by, tipo_obra, modified_by, id_estado_obra_mantenimiento', 'numerical', 'integerOnly'=>true),
			array('cantidad_global, cantidad_colocada', 'numerical'),
			array('descripcion', 'length', 'max'=>200),
			array('blnborrado, created_date, modified_datem, tipo_obra', 'safe'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('id, id_obra_pk_mantenimiento, descripcion, id_material_mantenimiento, cantidad_global, cantidad_colocada, blnborrado, created_by, modified_by, created_date, modified_date, id_estado_obra_mantenimiento', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
                    
                    'materiales' => array(self::BELONGS_TO, 'Tblmateriales', 'id_material_mantenimiento'),
                      'idObra' => array(self::BELONGS_TO, 'Obramantenimiento', 'id_obra_pk_mantenimiento'),
                      'estado' => array(self::BELONGS_TO, 'TblEstado', 'id_estado_obra_mantenimiento'),
                    
                    
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'id_obra_pk_mantenimiento' => 'Obra',
			'descripcion' => 'Descripcion',
			'id_material_mantenimiento' => 'Material',
			'cantidad_global' => 'Cantidad Global',
			'cantidad_colocada' => 'Cantidad Colocada',
			'blnborrado' => 'Blnborrado',
			'created_by' => 'Created By',
			'modified_by' => 'Modified By',
			'created_date' => 'Created Date',
			'modified_date' => 'Modified Date',
			'id_estado_obra_mantenimiento' => 'Estado',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;
                $sort=new CSort();
                
		$criteria->compare('id',$this->id);
		  $criteria->with =array('idObra');
                //declaro la condicion de la busqueda con el case sensitive (buscar mayusculas minusculas)
                $criteria->addSearchCondition('LOWER("idObra"."descripcion")',strtolower($this->id_obra_pk_mantenimiento),true);
		$criteria->compare('descripcion',$this->descripcion,true);
		$criteria->compare('id_material_mantenimiento',$this->id_material_mantenimiento);
		$criteria->compare('cantidad_global',$this->cantidad_global);
		$criteria->compare('cantidad_colocada',$this->cantidad_colocada);
		$criteria->compare('blnborrado',$this->blnborrado);
		$criteria->compare('created_by',$this->created_by);
		$criteria->compare('modified_by',$this->modified_by);
		$criteria->compare('created_date',$this->created_date,true);
		$criteria->compare('modified_date',$this->modified_date,true);
		$criteria->compare('id_estado_obra_mantenimiento',$this->id_estado_obra_mantenimiento);

                
                
 
                
                
		  $_SESSION['datos_filtrados'] = new CActiveDataProvider($this, array(
                      'criteria'=>$criteria,
                      'sort'=>$sort,
                      'pagination'=>false,
              ));

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return MaterialesObraMantenimiento the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
        
        
                 public function behaviors()
{
    return array(
        'CTimestampBehavior' => array(
            'class' => 'zii.behaviors.CTimestampBehavior',
            'createAttribute' => 'created_date',
            'updateAttribute' => 'modified_date',
            'setUpdateOnCreate' => true,
        ),
        'BlameableBehavior' => array(
            'class' => 'application.components.behaviors.BlameableBehavior',
            'createdByColumn' => 'created_by', 
            'updatedByColumn' => 'modified_by',  
        ),
    );  
}
        
        
}
