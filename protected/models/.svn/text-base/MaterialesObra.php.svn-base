<?php

/**
 * This is the model class for table "maquinaria.materiales_obra".
 *
 * The followings are the available columns in table 'maquinaria.materiales_obra':
 * @property integer $id
 * @property integer $id_obra_pk
 * @property string $descripcion
 * @property integer $id_material
 * @property double $cantidad_global
 * @property double $cantidad_colocada
 */
class MaterialesObra extends CActiveRecord
{
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'maquinaria.materiales_obra';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('id_obra_pk, id_material, id_estado_1', 'numerical', 'integerOnly'=>true),
			array( 'id_material', 'required'),
			array('cantidad_global, cantidad_colocada', 'numerical'),
			array('descripcion', 'length', 'max'=>200),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('id, id_obra_pk, descripcion, id_material, cantidad_global, cantidad_colocada, id_estado_1', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
                    
                    'materiales' => array(self::BELONGS_TO, 'Tblmateriales', 'id_material'),
                      'idObra' => array(self::BELONGS_TO, 'Obra', 'id_obra_pk'),
                    
                    
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'id_obra_pk' => 'Id Obra Pk',
			'descripcion' => 'Observacion',
			'id_material' => 'Material',
			'cantidad_global' => 'Cantidad Global',
			'cantidad_colocada' => 'Cantidad Colocada',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;
		  $sort=new CSort();


		  $criteria->condition="blnborrado=false";
		$criteria->compare('id',$this->id);
		 //Buscar obra en valuaciones declao un arreglo con el nombre de la relacion
                $criteria->with =array('idObra');
                //declaro la condicion de la busqueda con el case sensitive (buscar mayusculas minusculas)
                $criteria->addSearchCondition('LOWER("idObra"."str_descripcion")',strtolower($this->id_obra_pk),true);
                
		$criteria->compare('descripcion',$this->descripcion,true);
		$criteria->compare('id_material',$this->id_material);
		$criteria->compare('cantidad_global',$this->cantidad_global);
		$criteria->compare('cantidad_colocada',$this->cantidad_colocada);
		$criteria->compare('id_estado_1',$this->id_estado_1);									


		  $_SESSION['datos_filtrados'] = new CActiveDataProvider($this, array(
                      'criteria'=>$criteria,
                      'sort'=>$sort,
                      'pagination'=>false,
              ));


		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return MaterialesObra the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
        
        
                 public function behaviors()
{
    return array(
        'CTimestampBehavior' => array(
            'class' => 'zii.behaviors.CTimestampBehavior',
            'createAttribute' => 'created_date',
            'updateAttribute' => 'modified_date',
            'setUpdateOnCreate' => true,
        ),
        'BlameableBehavior' => array(
            'class' => 'application.components.behaviors.BlameableBehavior',
            'createdByColumn' => 'created_by', 
            'updatedByColumn' => 'modified_by',  
        ),
    );  
}
    
        
}
