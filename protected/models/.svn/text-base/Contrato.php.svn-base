<?php

/**
 * This is the model class for table "valuaciones.contrato".
 *
 * The followings are the available columns in table 'valuaciones.contrato':
 * @property integer $id
 * @property integer $id_obra
 * @property string $ncontrato
 * @property string $puntocuenta
 * @property string $nombcontratista
 * @property string $fechainicio
 * @property boolean $blnborrado
 * @property string $created_date
 * @property string $modified_date
 * @property integer $created_by
 * @property integer $modified_by
 */
class Contrato extends CActiveRecord
{
    public $fechainicio_range = array();
    public $fechacul_range = array();
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'valuaciones.contrato';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('id_obra, id_contratista, monto,created_by, modified_by', 'numerical', 'integerOnly'=>true),
			array('ncontrato,monto, fechacul, puntocuenta, nombcontratista, fechainicio, blnborrado, created_date, modified_date', 'safe'),
                        array('id_obra, ncontrato, monto, fechacul, fechainicio, id_contratista', 'required'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('id, id_obra, monto, fechacul, ncontrato, puntocuenta, nombcontratista, fechainicio, blnborrado, created_date, modified_date, created_by, modified_by', 'safe', 'on'=>'search'),
		);      
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
                    'idContrat' => array(self::BELONGS_TO, 'TblContratista', 'id_contratista'),

              
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'id_obra' => 'Id Obra',
			'ncontrato' => 'NÂ° de Contrato',
			'puntocuenta' => 'Punto de cuenta',
			'nombcontratista' => 'Nombre de la Contratista',
			'fechainicio' => 'Fecha de inicio',
			'blnborrado' => 'Blnborrado',
			'created_date' => 'Created Date',
			'modified_date' => 'Modified Date',
			'created_by' => 'Created By',
			'modified_by' => 'Modified By',
                        'monto'=>'Monto',
                        'fechacul'=>'Fecha de culminacion',
                        'id_contratista'=>'Contratista',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.
              
                $criteria=new CDbCriteria;
                $sort=new CSort();
		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id);
		$criteria->compare('id_obra',$this->id_obra);
                $criteria->compare('monto',$this->monto);
		$criteria->compare('ncontrato',$this->ncontrato,true);
		$criteria->compare('puntocuenta',$this->puntocuenta,true);
		$criteria->compare('nombcontratista',$this->nombcontratista,true);
		$criteria->compare('fechainicio',$this->fechainicio,true);
                $criteria->compare('fechacul',$this->fechacul,true);
		$criteria->compare('blnborrado',$this->blnborrado);
		$criteria->compare('created_date',$this->created_date,true);
		$criteria->compare('modified_date',$this->modified_date,true);
		$criteria->compare('created_by',$this->created_by);
		$criteria->compare('modified_by',$this->modified_by);

  
                
                  //fechainicio_range
          $from = $to = '';
          if (count($this->fechainicio_range)>=1) {
              if (isset($this->fechainicio_range['from'])) {
                  $from = $this->fechainicio_range['from'];
              }
              if (isset($this->fechainicio_range['to'])) {
                  $to= $this->fechainicio_range['to'];
              }
          }
          if ($from!='' || $to !='') {
              if ($from!='' && $to!='') {
                  $from = date("Y-m-d", strtotime($from));
                  $to = date("Y-m-d", strtotime($to));
                  $criteria->compare('fechainicio',">= $from",false);
                  $criteria->compare('fechainicio',"<= $to",false);
              }
              else {
                  if ($from!='') $creation_time = $from;
                  if ($to != '') $creation_time = $to;
                  $creation_time = date("Y-m-d", strtotime($creation_time));
                  $criteria->compare('fechainicio', "$creation_time" ,false);
              }
          }
                    //fechacul_range
          $from = $to = '';
          if (count($this->fechacul_range)>=1) {
              if (isset($this->fechacul_range['from'])) {
                  $from = $this->fechacul_range['from'];
              }
              if (isset($this->fechacul_range['to'])) {
                  $to= $this->fechacul_range['to'];
              }
          }
          if ($from!='' || $to !='') {
              if ($from!='' && $to!='') {
                  $from = date("Y-m-d", strtotime($from));
                  $to = date("Y-m-d", strtotime($to));
                  $criteria->compare('fechacul',">= $from",false);
                  $criteria->compare('fechacul',"<= $to",false);
              }
              else {
                  if ($from!='') $creation_time = $from;
                  if ($to != '') $creation_time = $to;
                  $creation_time = date("Y-m-d", strtotime($creation_time));
                  $criteria->compare('fechacul', "$creation_time" ,false);
              }
          }


		 $_SESSION['datos_filtrados'] = new CActiveDataProvider($this, array(
                      'criteria'=>$criteria,
                      'sort'=>$sort,
                      'pagination'=>false,
              ));
                 
		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return Contrato the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

         public function behaviors()
{
    return array(
        'CTimestampBehavior' => array(
            'class' => 'zii.behaviors.CTimestampBehavior',
            'createAttribute' => 'created_date',
            'updateAttribute' => 'modified_date',
            'setUpdateOnCreate' => true,
        ),
        'BlameableBehavior' => array(
            'class' => 'application.components.behaviors.BlameableBehavior',
            'createdByColumn' => 'created_by', 
            'updatedByColumn' => 'modified_by',  
        ),
    );  
}
        
        
        
        
        }


