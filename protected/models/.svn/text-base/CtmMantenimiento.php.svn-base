<?php

/**
 * This is the model class for table "mantenimiento1.ctm_mantenimiento".
 *
 * The followings are the available columns in table 'mantenimiento1.ctm_mantenimiento':
 * @property integer $id
 * @property integer $id_obra_fk_mantenimiento
 * @property string $descripcion
 * @property integer $id_material_mantenimiento1
 * @property double $cantidad1
 * @property string $fecha
 * @property boolean $blnborrado
 * @property integer $created_by
 * @property integer $modified_by
 * @property string $created_date
 * @property string $modified_date
 * @property integer $id_estado_ctm
 * @property double $avance
 * @property integer $unidad
 */
class CtmMantenimiento extends CActiveRecord
{
    public $fecha_range = array(); 
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'mantenimiento1.ctm_mantenimiento';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
                        array( 'id_material_mantenimiento1, fecha, cantidad1, avance, unidad', 'required'),
			array('id_obra_fk_mantenimiento, id_material_mantenimiento1, created_by, modified_by, id_estado_ctm, unidad', 'numerical', 'integerOnly'=>true),
			array('cantidad1, avance', 'numerical'),
			array('descripcion', 'length', 'max'=>200),
			array('fecha, fecha2, blnborrado, created_date, fecha_range, modified_date', 'safe'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('id, id_obra_fk_mantenimiento, descripcion, fecha_range, id_material_mantenimiento1, cantidad1, fecha, blnborrado, created_by, fecha2, modified_by, created_date, modified_date, id_estado_ctm, avance, unidad', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
                    'materiales' => array(self::BELONGS_TO, 'Tblmateriales', 'id_material_mantenimiento1'),
                    'estado' => array(self::BELONGS_TO, 'TblEstado', 'id_estado_ctm'),
                      'idObra' => array(self::BELONGS_TO, 'Obramantenimiento', 'id_obra_fk_mantenimiento'),  
                      'Unidad' => array(self::BELONGS_TO, 'MedidasMantenimiento', 'unidad'),  
                    
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'id_obra_fk_mantenimiento' => 'Obra',
			'descripcion' => 'Observacion',
			'id_material_mantenimiento1' => 'Materiales',
			'cantidad1' => 'Cantidad Propuesta',
			'fecha' => 'Fecha',
			'fecha' => 'Fecha',
			'blnborrado' => 'Blnborrado',
			'created_by' => 'Created By',
			'modified_by' => 'Modified By',
			'created_date' => 'Created Date',
			'modified_date' => 'Modified Date',
			'id_estado_ctm' => 'Estado',
			'avance' => 'Avance Propuesto',
			'unidad' => 'Unidad',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;
$sort=new CSort();

		$criteria->compare('id',$this->id);
		 $criteria->with =array('idObra');
                //declaro la condicion de la busqueda con el case sensitive (buscar mayusculas minusculas)
                $criteria->addSearchCondition('LOWER("idObra"."descripcion")',strtolower($this->id_obra_fk_mantenimiento),true);
		$criteria->compare('descripcion',$this->descripcion,true);
		$criteria->compare('id_material_mantenimiento1',$this->id_material_mantenimiento1);
		$criteria->compare('cantidad1',$this->cantidad1);
		$criteria->compare('fecha',$this->fecha,true);
		$criteria->compare('fecha2',$this->fecha2,true);
		$criteria->compare('blnborrado',$this->blnborrado);
		$criteria->compare('created_by',$this->created_by);
		$criteria->compare('modified_by',$this->modified_by);
		$criteria->compare('created_date',$this->created_date,true);
		$criteria->compare('modified_date',$this->modified_date,true);
		$criteria->compare('id_estado_ctm',$this->id_estado_ctm);
		$criteria->compare('avance',$this->avance);
		$criteria->compare('unidad',$this->unidad);

                
                
                  $from = $to = '';
          if (count($this->fecha_range)>=1) {
              if (isset($this->fecha_range['from'])) {
                  $from = $this->fecha_range['from'];
              }
              if (isset($this->fecha_range['to'])) {
                  $to= $this->fecha_range['to'];
              }
          }
          if ($from!='' || $to !='') {
              if ($from!='' && $to!='') {
                  $from = date("Y-m-d", strtotime($from));
                  $to = date("Y-m-d", strtotime($to));
                  $criteria->compare('fecha',">= $from",false);
                  $criteria->compare('fecha',"<= $to",false);
              }
              else {
                  if ($from!='') $creation_time = $from;
                  if ($to != '') $creation_time = $to;
                  $creation_time = date("Y-m-d", strtotime($creation_time));
                  $criteria->compare('fecha', "$creation_time" ,false);
              }
          }
                
                
		      $_SESSION['datos_filtrados'] = new CActiveDataProvider($this, array(
                      'criteria'=>$criteria,
                      'sort'=>$sort,
                      'pagination'=>false,
              ));

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return CtmMantenimiento the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
}
